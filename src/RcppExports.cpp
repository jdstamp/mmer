// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// count_samples
int count_samples(std::string filename);
RcppExport SEXP _famer_count_samples(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(count_samples(filename));
    return rcpp_result_gen;
END_RCPP
}
// count_fam
int count_fam(std::string filename);
RcppExport SEXP _famer_count_fam(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(count_fam(filename));
    return rcpp_result_gen;
END_RCPP
}
// count_snps_bim
int count_snps_bim(std::string filename);
RcppExport SEXP _famer_count_snps_bim(SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    rcpp_result_gen = Rcpp::wrap(count_snps_bim(filename));
    return rcpp_result_gen;
END_RCPP
}
// fame_cpp
Rcpp::List fame_cpp(std::string plink_file, std::string pheno_file, std::string covariate_file, int n_randvecs, int n_blocks, int rand_seed, std::vector<int> gxg_indices, std::string genotype_mask_file);
RcppExport SEXP _famer_fame_cpp(SEXP plink_fileSEXP, SEXP pheno_fileSEXP, SEXP covariate_fileSEXP, SEXP n_randvecsSEXP, SEXP n_blocksSEXP, SEXP rand_seedSEXP, SEXP gxg_indicesSEXP, SEXP genotype_mask_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type plink_file(plink_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type pheno_file(pheno_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type covariate_file(covariate_fileSEXP);
    Rcpp::traits::input_parameter< int >::type n_randvecs(n_randvecsSEXP);
    Rcpp::traits::input_parameter< int >::type n_blocks(n_blocksSEXP);
    Rcpp::traits::input_parameter< int >::type rand_seed(rand_seedSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type gxg_indices(gxg_indicesSEXP);
    Rcpp::traits::input_parameter< std::string >::type genotype_mask_file(genotype_mask_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(fame_cpp(plink_file, pheno_file, covariate_file, n_randvecs, n_blocks, rand_seed, gxg_indices, genotype_mask_file));
    return rcpp_result_gen;
END_RCPP
}
// readH5File
std::vector<int> readH5File(const std::string& filename, const std::string& datasetName);
RcppExport SEXP _famer_readH5File(SEXP filenameSEXP, SEXP datasetNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type datasetName(datasetNameSEXP);
    rcpp_result_gen = Rcpp::wrap(readH5File(filename, datasetName));
    return rcpp_result_gen;
END_RCPP
}
// replaceH5Dataset
void replaceH5Dataset(const std::string& filename, const std::string& datasetName, const std::vector<int>& newData);
RcppExport SEXP _famer_replaceH5Dataset(SEXP filenameSEXP, SEXP datasetNameSEXP, SEXP newDataSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type datasetName(datasetNameSEXP);
    Rcpp::traits::input_parameter< const std::vector<int>& >::type newData(newDataSEXP);
    replaceH5Dataset(filename, datasetName, newData);
    return R_NilValue;
END_RCPP
}
// simulate_traits_cpp
Rcpp::List simulate_traits_cpp(std::string plink_file, float heritability, float rho, int n_additive_snps, std::vector<int> gxg_group_1, std::vector<int> gxg_group_2);
RcppExport SEXP _famer_simulate_traits_cpp(SEXP plink_fileSEXP, SEXP heritabilitySEXP, SEXP rhoSEXP, SEXP n_additive_snpsSEXP, SEXP gxg_group_1SEXP, SEXP gxg_group_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type plink_file(plink_fileSEXP);
    Rcpp::traits::input_parameter< float >::type heritability(heritabilitySEXP);
    Rcpp::traits::input_parameter< float >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type n_additive_snps(n_additive_snpsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type gxg_group_1(gxg_group_1SEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type gxg_group_2(gxg_group_2SEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_traits_cpp(plink_file, heritability, rho, n_additive_snps, gxg_group_1, gxg_group_2));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_famer_count_samples", (DL_FUNC) &_famer_count_samples, 1},
    {"_famer_count_fam", (DL_FUNC) &_famer_count_fam, 1},
    {"_famer_count_snps_bim", (DL_FUNC) &_famer_count_snps_bim, 1},
    {"_famer_fame_cpp", (DL_FUNC) &_famer_fame_cpp, 8},
    {"_famer_readH5File", (DL_FUNC) &_famer_readH5File, 2},
    {"_famer_replaceH5Dataset", (DL_FUNC) &_famer_replaceH5Dataset, 3},
    {"_famer_simulate_traits_cpp", (DL_FUNC) &_famer_simulate_traits_cpp, 6},
    {"run_testthat_tests", (DL_FUNC) &run_testthat_tests, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_famer(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
